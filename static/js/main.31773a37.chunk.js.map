{"version":3,"sources":["pages/Home/styles.js","contexts/posts.js","actions/posts.js","contexts/starredPosts.js","components/Post.js","components/PostList.js","contexts/auth.js","api/constants.js","api/client.js","pages/Home/Home.js","components/AuthForm.js","pages/Login/styles.js","pages/Login/Login.js","components/Comment.js","pages/Comments/Comments.js","components/PrivateRoute.js","reducers/posts.js","reducers/starredPosts.js","App.js","serviceWorker.js","index.js"],"names":["Header","styled","Container","Main","div","Welcome","h2","PostsContext","createContext","usePosts","useContext","actionTypes","fetchPostSuccess","posts","type","payload","StarredPostsContext","useStarredPosts","CustomContainer","CustomButton","Button","CustomLink","Link","Post","id","showStarred","starredPosts","dispatchToStarredPosts","post","entities","isStarred","useMemo","Boolean","find","key","Row","Col","Card","CardBody","CardTitle","title","CardText","body","to","onClick","unStarredPost","starredPost","color","PostList","allowStarredPost","map","AuthContext","useAuth","baseURL","URLS","users","getData","url","a","async","fetch","response","json","data","client","login","username","email","filter","user","toLowerCase","getPostsByUserId","normalizedData","reduce","acc","current","keys","getCommentsByPostId","Home","useState","activeTab","setActiveTab","loggedUser","authUser","dispatchToPosts","toggle","tab","useEffect","console","log","getPosts","sm","name","size","Nav","tabs","NavItem","NavLink","className","classnames","active","TabContent","TabPane","tabId","loading","Form","Input","input","button","Logo","h1","UsernameInput","ButtonRow","Login","setUsername","setEmail","src","placeholder","value","onChange","event","persist","target","role","result","alert","CustomCard","Comment","comment","Comments","match","comments","setComments","params","getComments","PrivateRoute","Component","component","rest","render","useCallback","props","initialPostState","err","postReducer","state","action","Error","initialStateStarredPosts","starredPostsReducer","newState","localStorage","setItem","JSON","stringify","nextState","App","setLoggedUser","useReducer","localUser","getItem","parse","checkLocalSession","Provider","basename","exact","path","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31773a37.chunk.js","sourcesContent":["import { Container } from \"reactstrap\";\nimport styled from \"styled-components\";\n\nexport const Header = styled(Container)`\n  padding-top: 11px;\n  margin-bottom: 12px;\n`;\n\nexport const Main = styled.div`\n  background: linear-gradient(to bottom right, #039fd9, #7d50d5);\n  padding: 0;\n  margin: 0;\n  min-height: 100vh;\n`;\n\nexport const Welcome = styled.h2`\n  color: #e0e0e0;\n`;\n","import { createContext, useContext } from \"react\";\n\nexport const PostsContext = createContext();\n\nexport const usePosts = () => useContext(PostsContext);\n","export const actionTypes = {\n  LOADING_POSTS: \"LOADING_POSTS\",\n  FETCH_POSTS_SUCCESS: \"FETCH_POSTS_SUCCESS\",\n  FETCH_POSTS_ERROR: \"FETCH_POSTS_ERROR\",\n  STARRED_POST: \"STARRED_POST\",\n  UNSTARRED_POST: \"UNSTARRED_POST\"\n};\n\nexport const loadingPosts = () => ({\n  type: actionTypes.LOADING_POSTS\n});\n\nexport const fetchPostSuccess = posts => ({\n  type: actionTypes.FETCH_POSTS_SUCCESS,\n  payload: posts\n});\n\nexport const fetchPostsError = err => ({\n  type: actionTypes.FETCH_POSTS_ERROR,\n  payload: err\n});\n\nexport const starredPost = id => ({\n  type: actionTypes.STARRED_POST,\n  payload: id\n});\n\nexport const unStarredPost = id => ({\n  type: actionTypes.UNSTARRED_POST,\n  payload: id\n});\n","import { createContext, useContext } from \"react\";\n\nexport const StarredPostsContext = createContext();\n\nexport const useStarredPosts = () => useContext(StarredPostsContext);\n","import React, { useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Row,\n  Col,\n  Container,\n  Button,\n  Card,\n  CardText,\n  CardBody,\n  CardTitle\n} from \"reactstrap\";\nimport styled from \"styled-components\";\nimport { usePosts } from \"../contexts/posts\";\nimport { starredPost, unStarredPost } from \"../actions/posts\";\nimport { useStarredPosts } from \"../contexts/starredPosts\";\n\nconst CustomContainer = styled(Container)`\n  margin-bottom: 12px;\n`;\n\nconst CustomButton = styled(Button)`\n  margin-top: 15px;\n  margin-bottom: 14px;\n  margin-left: 10px;\n`;\n\nconst CustomLink = styled(Link)`\n  color: blue;\n  margin-top: 10px;\n  margin-bottom: 15px;\n`;\n\nexport const Post = ({ id, showStarred }) => {\n  const [posts] = usePosts();\n  const [starredPosts, dispatchToStarredPosts] = useStarredPosts();\n\n  const post = { ...posts.entities[id] };\n\n  post.isStarred = useMemo(\n    () => Boolean(starredPosts.find(key => key === id)),\n    [id, starredPosts]\n  );\n\n  const handleStarred = () => {\n    if (post.isStarred) {\n      dispatchToStarredPosts(unStarredPost(id));\n    } else {\n      dispatchToStarredPosts(starredPost(id));\n    }\n  };\n\n  return (\n    <CustomContainer>\n      <Row>\n        <Col>\n          <Card>\n            <CardBody>\n              <CardTitle>{post.title}</CardTitle>\n              <CardText>{post.body}</CardText>\n              <CustomLink to={`/post/${post.id}/comments`}>\n                View comments\n              </CustomLink>\n              {showStarred && (\n                <CustomButton onClick={handleStarred} color=\"info\">\n                  {post.isStarred ? \"Remove from Fav.\" : \"Add To Fav.\"}\n                </CustomButton>\n              )}\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </CustomContainer>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Post } from \"./Post\";\n\nconst Container = styled.div`\n  margin-top: 12px;\n`;\n\nexport const PostList = ({ posts, allowStarredPost }) => {\n  return (\n    <Container>\n      {posts.map(post => (\n        <div key={post}>\n          <Post id={post} showStarred={allowStarredPost} />\n        </div>\n      ))}\n    </Container>\n  );\n};\n","import { createContext, useContext } from \"react\";\n\nexport const AuthContext = createContext();\n\nexport const useAuth = () => useContext(AuthContext);\n","const baseURL = \"https://jsonplaceholder.typicode.com\";\n\nconst URLS = {\n  users: `${baseURL}/users`,\n  posts: `${baseURL}/posts`\n};\n\nexport default URLS;\n","import URLS from \"./constants\";\n\nconst getData = async url => {\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n\nconst client = {\n  login: async (username, email) => {\n    try {\n      const data = await getData(URLS.users);\n\n      const [user] = data.filter(\n        user =>\n          user.username.toLowerCase() === username &&\n          user.email.toLowerCase() === email\n      );\n\n      return user;\n    } catch (err) {\n      throw err;\n    }\n  },\n  getPostsByUserId: async id => {\n    try {\n      const url = `${URLS.users}/${id}/posts`;\n      const data = await getData(url);\n\n      const normalizedData = {\n        entities: data.reduce(\n          (acc, current) => ({ ...acc, [current.id]: { ...current } }),\n          {}\n        ),\n        keys: data.map(post => post.id)\n      };\n\n      return normalizedData;\n    } catch (err) {\n      throw err;\n    }\n  },\n  getCommentsByPostId: async id => {\n    try {\n      const url = `${URLS.posts}/${id}/comments`;\n      const data = await getData(url);\n\n      return data;\n    } catch (err) {\n      throw err;\n    }\n  }\n};\n\nexport default client;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Row,\n  Col,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport classnames from \"classnames\";\nimport { Header, Main, Welcome } from \"./styles\";\nimport { PostList } from \"../../components/PostList\";\nimport { useAuth } from \"../../contexts/auth\";\nimport client from \"../../api/client\";\nimport { usePosts } from \"../../contexts/posts\";\nimport { fetchPostSuccess, loadingPosts } from \"../../actions/posts\";\nimport { useStarredPosts } from \"../../contexts/starredPosts\";\n\nexport const Home = () => {\n  const [activeTab, setActiveTab] = useState(\"1\");\n  const { loggedUser, authUser } = useAuth();\n  const [posts, dispatchToPosts] = usePosts();\n  const [starredPosts] = useStarredPosts();\n\n  const toggle = tab => {\n    if (activeTab !== tab) setActiveTab(tab);\n  };\n\n  const handleLoggout = () => {\n    authUser(null);\n  };\n\n  useEffect(() => {\n    const getPosts = async () => {\n      try {\n        dispatchToPosts(loadingPosts());\n        const posts = await client.getPostsByUserId(loggedUser.id);\n\n        dispatchToPosts(fetchPostSuccess(posts));\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getPosts();\n  }, [loggedUser.id, dispatchToPosts]);\n\n  return (\n    <Main>\n      <Header>\n        <Row>\n          <Col sm={9}>\n            <Welcome>Welcome: {loggedUser.name}</Welcome>\n          </Col>\n          <Col sm={{ size: 3 }}>\n            <Button color=\"danger\" onClick={handleLoggout}>\n              Loggout\n            </Button>\n          </Col>\n        </Row>\n      </Header>\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === \"1\" })}\n            onClick={() => {\n              toggle(\"1\");\n            }}\n          >\n            Posts Feed\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === \"2\" })}\n            onClick={() => {\n              toggle(\"2\");\n            }}\n          >\n            Favorite Posts\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\">\n          {posts.loading ? (\n            <p>loading your posts</p>\n          ) : (\n            <PostList posts={posts.keys} allowStarredPost />\n          )}\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <PostList posts={starredPosts} />\n        </TabPane>\n      </TabContent>\n    </Main>\n  );\n};\n","import styled from \"styled-components\";\n\nconst Card = styled.div`\n  box-sizing: border-box;\n  max-width: 410px;\n  margin: 0 auto;\n  padding: 0 2rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst Input = styled.input`\n  padding: 1rem;\n  border-top: transparent !important;\n  border-left: transparent !important;\n  border-right: transparent !important;\n  border-bottom: 1px solid white;\n  box-shadow: none !important;\n  margin-bottom: 1rem;\n  font-size: 1rem;\n  background-color: transparent;\n  outline: none;\n  color: white;\n  &::placeholder {\n    color: white;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: white;\n  border-radius: 6px;\n  color: #49a2e1;\n  font-weight: 600;\n\n  padding-top: auto;\n  padding-bottom: auto;\n  text-align: center;\n  margin-bottom: 1rem;\n  font-size: 1.1rem;\n  padding: 12px 15px 11px 15px;\n  border: none;\n`;\n\nconst Logo = styled.h1`\n  color: white;\n  text-align: center;\n  padding-top: 86px;\n`;\n\nconst Error = styled.div`\n  background-color: red;\n`;\n\nexport { Form, Input, Button, Logo, Card, Error };\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  background: linear-gradient(to bottom right, #039fd9, #7d50d5);\n  height: 100vh;\n`;\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { Card, Logo, Form, Input, Button } from \"../../components/AuthForm\";\nimport { Container } from \"./styles\";\nimport { useAuth } from \"../../contexts/auth\";\nimport client from \"../../api/client\";\n\nconst UsernameInput = styled(Input)`\n  text-transform: capitalize;\n`;\n\nconst ButtonRow = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 36px;\n`;\n\nexport const Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const { loggedUser, authUser } = useAuth();\n\n  const handleLogin = async () => {\n    const result = await client.login(\n      username.toLowerCase(),\n      email.toLowerCase()\n    );\n    if (result) {\n      authUser(result);\n    } else {\n      alert(\"user not found\");\n    }\n  };\n\n  const handleUsername = event => {\n    event.persist();\n    setUsername(event.target.value);\n  };\n\n  const handleEmail = event => {\n    event.persist();\n    setEmail(event.target.value);\n  };\n\n  if (loggedUser) return <Redirect to=\"/welcome\" />;\n\n  return (\n    <Container>\n      <Logo>UMBRELLA</Logo>\n      <Card>\n        <Logo src=\"\" />\n        <Form>\n          <UsernameInput\n            type=\"text\"\n            placeholder=\"Enter your username\"\n            value={username}\n            onChange={handleUsername}\n          />\n          <Input\n            type=\"email\"\n            placeholder=\"Password\"\n            onChange={handleEmail}\n            value={email}\n          />\n          <ButtonRow>\n            <Button role=\"button\" onClick={handleLogin}>\n              Sign In\n            </Button>\n          </ButtonRow>\n        </Form>\n      </Card>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  Card,\n  CardText,\n  CardBody,\n  CardTitle\n} from \"reactstrap\";\nimport styled from \"styled-components\";\n\nconst CustomCard = styled(Card)`\n  margin: 10px 0px;\n`;\n\nexport const Comment = ({ comment }) => (\n  <Container>\n    <Row>\n      <Col>\n        <CustomCard>\n          <CardBody>\n            <CardTitle>\n              {comment.name} {comment.email}\n            </CardTitle>\n            <CardText>{comment.body}</CardText>\n          </CardBody>\n        </CustomCard>\n      </Col>\n    </Row>\n  </Container>\n);\n","import React, { useEffect, useState } from \"react\";\nimport { Container } from \"reactstrap\";\nimport { Comment } from \"../../components/Comment\";\nimport client from \"../../api/client\";\n\nexport const Comments = ({ match }) => {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const getComments = async () => {\n      const comments = await client.getCommentsByPostId(match.params.id);\n      setComments(comments);\n    };\n    getComments();\n  }, [match.params.id]);\n\n  return (\n    <Container>\n      <h3>Comments</h3>\n      {comments.map(comment => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n    </Container>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/auth\";\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => {\n  const { loggedUser } = useAuth();\n\n  const render = useCallback(\n    props => (loggedUser ? <Component {...props} /> : <Redirect to=\"/\" />),\n    [loggedUser]\n  );\n\n  return <Route {...rest} render={render} />;\n};\n","import { actionTypes } from \"../actions/posts\";\n\nexport const initialPostState = {\n  entities: {},\n  keys: [],\n  loading: false,\n  err: null\n};\n\nexport const postReducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_POSTS_SUCCESS:\n      return { ...action.payload, loading: false, err: null };\n    case actionTypes.FETCH_POSTS_ERROR:\n      return {\n        ...state,\n        err: action.payload\n      };\n    case actionTypes.LOADING_POSTS:\n      return { ...state, loading: true };\n\n    default:\n      throw new Error();\n  }\n};\n","import { actionTypes } from \"../actions/posts\";\n\nexport const initialStateStarredPosts = [];\n\nexport const starredPostsReducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.STARRED_POST:\n      const newState = [...state, action.payload];\n      localStorage.setItem(\"starredPosts\", JSON.stringify(newState));\n      return newState;\n    case actionTypes.UNSTARRED_POST:\n      const nextState = state.filter(key => key !== action.payload);\n      localStorage.setItem(\"starredPosts\", JSON.stringify(nextState));\n      return nextState;\n    default:\n      throw new Error();\n  }\n};\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { Home } from \"./pages/Home\";\nimport { Login } from \"./pages/Login\";\nimport { Comments } from \"./pages/Comments\";\nimport { PrivateRoute } from \"./components/PrivateRoute\";\nimport { AuthContext } from \"./contexts/auth\";\nimport { PostsContext } from \"./contexts/posts\";\nimport { StarredPostsContext } from \"./contexts/starredPosts\";\nimport { initialPostState, postReducer } from \"./reducers/posts\";\nimport {\n  starredPostsReducer,\n  initialStateStarredPosts\n} from \"./reducers/starredPosts\";\n\nconst App = () => {\n  const [loggedUser, setLoggedUser] = useState(null);\n  const [posts, dispatchToPosts] = useReducer(postReducer, initialPostState);\n  const [starredPosts, dispatchToStarredPosts] = useReducer(\n    starredPostsReducer,\n    initialStateStarredPosts\n  );\n\n  useEffect(() => {\n    const checkLocalSession = async () => {\n      const localUser = localStorage.getItem(\"user\");\n      if (localUser) {\n        const user = await JSON.parse(localUser);\n        setLoggedUser(user);\n      }\n    };\n\n    checkLocalSession();\n  }, []);\n\n  const authUser = user => {\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    setLoggedUser(user);\n  };\n\n  return (\n    <AuthContext.Provider value={{ loggedUser, authUser }}>\n      <PostsContext.Provider value={[posts, dispatchToPosts]}>\n        <StarredPostsContext.Provider\n          value={[starredPosts, dispatchToStarredPosts]}\n        >\n          <Router basename=\"/\">\n            <Route exact path=\"/\" component={Login} />\n            <PrivateRoute path=\"/welcome\" component={Home} />\n            <PrivateRoute path=\"/post/:id/comments\" component={Comments} />\n          </Router>\n        </StarredPostsContext.Provider>\n      </PostsContext.Provider>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}